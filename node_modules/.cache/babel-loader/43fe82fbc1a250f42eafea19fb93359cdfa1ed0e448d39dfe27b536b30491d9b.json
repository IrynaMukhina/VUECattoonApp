{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"character-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_CharacterFilters = _resolveComponent(\"CharacterFilters\");\n  const _component_CharacterCard = _resolveComponent(\"CharacterCard\");\n  const _component_CharacterPagination = _resolveComponent(\"CharacterPagination\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_CharacterFilters, {\n    onFilter: $setup.applyFilters\n  }, null, 8 /* PROPS */, [\"onFilter\"]), _createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredCharacters, character => {\n    return _openBlock(), _createBlock(_component_CharacterCard, {\n      key: character.id,\n      character: character\n    }, null, 8 /* PROPS */, [\"character\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createVNode(_component_CharacterPagination, {\n    currentPage: $setup.currentPage,\n    totalPages: $setup.totalPages,\n    onChangePage: $setup.fetchCharacters\n  }, null, 8 /* PROPS */, [\"currentPage\", \"totalPages\", \"onChangePage\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createVNode","_component_CharacterFilters","onFilter","$setup","applyFilters","_createElementVNode","_hoisted_1","_Fragment","_renderList","filteredCharacters","character","_createBlock","_component_CharacterCard","key","id","_component_CharacterPagination","currentPage","totalPages","onChangePage","fetchCharacters"],"sources":["/Users/imukhina/Desktop/VueCartoonProject/VUECattoonApp/src/views/CharacterList.vue"],"sourcesContent":["<template>\n  <div>\n    <CharacterFilters @filter=\"applyFilters\" />\n    <div class=\"character-list\">\n      <CharacterCard\n        v-for=\"character in filteredCharacters\"\n        :key=\"character.id\"\n        :character=\"character\"\n      />\n    </div>\n    <CharacterPagination\n      :currentPage=\"currentPage\"\n      :totalPages=\"totalPages\"\n      @change-page=\"fetchCharacters\"\n    />\n  </div>\n</template>\n\n<script>\nimport { onMounted, ref, computed } from \"vue\";\nimport { useStore } from \"vuex\";\nimport CharacterFilters from \"../components/CharacterFilters.vue\";\nimport CharacterCard from \"../components/CharacterCard.vue\";\nimport CharacterPagination from \"../components/CharacterPagination.vue\";\n\nexport default {\n  components: { CharacterFilters, CharacterCard, CharacterPagination },\n  setup() {\n    const store = useStore();\n    const characters = ref([]);\n    const filters = ref({ name: \"\", species: \"\" });\n    const currentPage = ref(1);\n    const totalPages = ref(1);\n\n    // Fetch characters from API\n    const fetchCharacters = async (page = 1) => {\n      currentPage.value = page;\n      await store.dispatch(\"fetchCharacters\", { page });\n      characters.value = store.state.characters;\n\n      // Update the total pages from the API response\n      // Assuming this value comes from the API\n      totalPages.value = Math.ceil(100 / 20); // Replace 100 with total characters and 20 with per-page count\n    };\n\n    // Filtered characters based on search and species\n    const filteredCharacters = computed(() => {\n      return characters.value.filter((character) => {\n        const matchesName = character.name\n          .toLowerCase()\n          .includes(filters.value.name.toLowerCase());\n        const matchesSpecies =\n          !filters.value.species || character.species === filters.value.species;\n        return matchesName && matchesSpecies;\n      });\n    });\n\n    // Update filters and refetch characters\n    const applyFilters = (newFilters) => {\n      filters.value = { ...filters.value, ...newFilters };\n    };\n\n    onMounted(() => {\n      fetchCharacters();\n    });\n\n    return {\n      characters,\n      filteredCharacters,\n      fetchCharacters,\n      applyFilters,\n      currentPage,\n      totalPages,\n    };\n  },\n};\n</script>\n"],"mappings":";;EAGSA,KAAK,EAAC;AAAgB;;;;;uBAF7BC,mBAAA,CAcM,cAbJC,YAAA,CAA2CC,2BAAA;IAAxBC,QAAM,EAAEC,MAAA,CAAAC;EAAY,uCACvCC,mBAAA,CAMM,OANNC,UAMM,I,kBALJP,mBAAA,CAIEQ,SAAA,QARRC,WAAA,CAK4BL,MAAA,CAAAM,kBAAkB,EAA/BC,SAAS;yBADlBC,YAAA,CAIEC,wBAAA;MAFCC,GAAG,EAAEH,SAAS,CAACI,EAAE;MACjBJ,SAAS,EAAEA;;oCAGhBV,YAAA,CAIEe,8BAAA;IAHCC,WAAW,EAAEb,MAAA,CAAAa,WAAW;IACxBC,UAAU,EAAEd,MAAA,CAAAc,UAAU;IACtBC,YAAW,EAAEf,MAAA,CAAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}